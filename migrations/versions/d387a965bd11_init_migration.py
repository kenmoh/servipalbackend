"""init migration

Revision ID: d387a965bd11
Revises: 
Create Date: 2025-07-31 22:01:31.564806

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "d387a965bd11"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("actor_id", sa.Uuid(), nullable=False),
        sa.Column("actor_name", sa.String(), nullable=False),
        sa.Column("actor_role", sa.String(), nullable=False),
        sa.Column("action", sa.String(), nullable=False),
        sa.Column("resource_type", sa.String(length=64), nullable=False),
        sa.Column("resource_id", sa.Uuid(), nullable=True),
        sa.Column("resource_summary", sa.String(), nullable=True),
        sa.Column("changes", sa.JSON(), nullable=True),
        sa.Column("ip_address", sa.String(length=64), nullable=True),
        sa.Column("extra_metadata", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "categories",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "category_type",
            sa.Enum("FOOD", "PRODUCT", name="categorytype"),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "charges",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("payment_gate_way_fee", sa.Numeric(), nullable=False),
        sa.Column("value_added_tax", sa.Numeric(), nullable=False),
        sa.Column(
            "payout_charge_transaction_upto_5000_naira", sa.Numeric(), nullable=False
        ),
        sa.Column(
            "payout_charge_transaction_from_5001_to_50_000_naira",
            sa.Numeric(),
            nullable=False,
        ),
        sa.Column(
            "payout_charge_transaction_above_50_000_naira", sa.Numeric(), nullable=False
        ),
        sa.Column("stamp_duty", sa.Numeric(), nullable=False),
        sa.Column("base_delivery_fee", sa.Numeric(), nullable=False),
        sa.Column("delivery_fee_per_km", sa.Numeric(), nullable=False),
        sa.Column("delivery_commission_percentage", sa.Numeric(), nullable=False),
        sa.Column("food_laundry_commission_percentage", sa.Numeric(), nullable=False),
        sa.Column("product_commission_percentage", sa.Numeric(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("notification_token", sa.String(), nullable=True),
        sa.Column("is_blocked", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("rider_is_suspended_for_order_cancel", sa.Boolean(), nullable=True),
        sa.Column("rider_is_suspension_until", sa.DateTime(), nullable=True),
        sa.Column("order_cancel_count", sa.Integer(), nullable=True),
        sa.Column("reset_token", sa.String(), nullable=True),
        sa.Column("reset_token_expires", sa.DateTime(), nullable=True),
        sa.Column(
            "user_type",
            sa.Enum(
                "CUSTOMER",
                "DISPATCH",
                "RESTAURANT_VENDOR",
                "LAUNDRY_VENDOR",
                "RIDER",
                "ADMIN",
                "SUPER_ADMIN",
                "MODERATOR",
                name="usertype",
            ),
            nullable=False,
        ),
        sa.Column("is_email_verified", sa.Boolean(), nullable=True),
        sa.Column("email_verification_code", sa.String(), nullable=True),
        sa.Column("email_verification_expires", sa.DateTime(), nullable=True),
        sa.Column(
            "account_status",
            sa.Enum("PENDING", "CONFIRMED", name="accountstatus"),
            nullable=False,
        ),
        sa.Column("dispatcher_id", sa.Uuid(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["dispatcher_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("reset_token"),
    )
    op.create_table(
        "items",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "item_type",
            sa.Enum("FOOD", "PACKAGE", "LAUNDRY", "PRODUCT", name="itemtype"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("store_name", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("price", sa.Numeric(), nullable=False),
        sa.Column("sizes", sa.String(), nullable=True),
        sa.Column("side", sa.String(), nullable=True),
        sa.Column("colors", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("stock", sa.Integer(), nullable=True),
        sa.Column("in_stock", sa.Boolean(), nullable=False),
        sa.Column("total_sold", sa.Integer(), nullable=True),
        sa.Column("category_id", sa.Uuid(), nullable=True),
        sa.Column(
            "food_group",
            sa.Enum(
                "APPETIZER",
                "MAIN_COURSE",
                "DESSERT",
                "OTHERS",
                name="foodgroup",
                create_constraint=True,
            ),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "uq_name_user_non_package",
        "items",
        ["name", "user_id"],
        unique=True,
        postgresql_where=sa.text("item_type != 'PACKAGE'"),
    )
    op.create_table(
        "orders",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("order_number", sa.Integer(), nullable=True),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.Column("vendor_id", sa.Uuid(), nullable=False),
        sa.Column(
            "order_type",
            sa.Enum("PACKAGE", "FOOD", "LAUNDRY", "PRODUCT", name="ordertype"),
            nullable=False,
        ),
        sa.Column("total_price", sa.Numeric(), nullable=False),
        sa.Column("amount_due_vendor", sa.Numeric(), nullable=False),
        sa.Column("payment_link", sa.String(), nullable=True),
        sa.Column("additional_info", sa.String(), nullable=True),
        sa.Column(
            "order_payment_status",
            sa.Enum(
                "FAILED",
                "PAID",
                "CANCELLED",
                "PENDING",
                "COMPLETED",
                "SUCCESSFUL",
                name="paymentstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "order_status",
            sa.Enum(
                "ACCEPTED",
                "PENDING",
                "DELIVERED",
                "RECEIVED",
                "CANCELLED",
                "REJECTED",
                "VENDOR_RECEIVED_LAUNDRY_ITEM",
                name="orderstatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "require_delivery",
            sa.Enum("PICKUP", "DELIVERY", name="requiredeliveryschema"),
            nullable=False,
        ),
        sa.Column("cancel_reason", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vendor_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("order_number"),
    )
    op.create_table(
        "profile",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("business_name", sa.String(), nullable=True),
        sa.Column("bank_name", sa.String(), nullable=True),
        sa.Column("bank_account_number", sa.String(), nullable=True),
        sa.Column("business_address", sa.String(), nullable=True),
        sa.Column("business_registration_number", sa.String(), nullable=True),
        sa.Column("account_holder_name", sa.String(), nullable=True),
        sa.Column("opening_hours", sa.Time(), nullable=True),
        sa.Column("closing_hours", sa.Time(), nullable=True),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("store_name", sa.String(), nullable=True),
        sa.Column("bike_number", sa.String(), nullable=True),
        sa.Column("is_phone_verified", sa.Boolean(), nullable=True),
        sa.Column("phone_verification_code", sa.String(), nullable=True),
        sa.Column("phone_verification_expires", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("bike_number"),
        sa.UniqueConstraint("phone_number"),
        sa.UniqueConstraint("store_name"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column(
            "account_status",
            sa.Enum("PENDING", "CONFIRMED", name="accountstatus"),
            nullable=False,
        ),
        sa.Column("user_type", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_revoked", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_refresh_tokens_id"), "refresh_tokens", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_refresh_tokens_token"), "refresh_tokens", ["token"], unique=True
    )
    op.create_table(
        "sessions",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("terminated_by", sa.Uuid(), nullable=True),
        sa.Column("device_info", sa.String(), nullable=False),
        sa.Column("ip_address", sa.String(), nullable=False),
        sa.Column("last_active", sa.DateTime(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("termination_reason", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["terminated_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "wallets",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("balance", sa.Numeric(), nullable=False),
        sa.Column("escrow_balance", sa.Numeric(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "deliveries",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("order_id", sa.Uuid(), nullable=False),
        sa.Column("rider_id", sa.Uuid(), nullable=True),
        sa.Column("dispatch_id", sa.Uuid(), nullable=True),
        sa.Column("vendor_id", sa.Uuid(), nullable=True),
        sa.Column("sender_id", sa.Uuid(), nullable=True),
        sa.Column("sender_phone_number", sa.String(), nullable=False),
        sa.Column("rider_phone_number", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("pickup_coordinates", sa.ARRAY(sa.Float()), nullable=False),
        sa.Column("dropoff_coordinates", sa.ARRAY(sa.Float()), nullable=False),
        sa.Column("delivery_fee", sa.Numeric(), nullable=False),
        sa.Column("distance", sa.Numeric(), nullable=True),
        sa.Column("duration", sa.String(), nullable=True),
        sa.Column("origin", sa.String(), nullable=False),
        sa.Column("destination", sa.String(), nullable=False),
        sa.Column(
            "delivery_status",
            sa.Enum(
                "ACCEPTED",
                "PENDING",
                "DELIVERED",
                "RECEIVED",
                "CANCELLED",
                "VENDOR_RECEIVED_LAUNDRY_ITEM",
                name="deliverystatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "delivery_type",
            sa.Enum("FOOD", "LAUNDRY", "PACKAGE", name="deliverytype"),
            nullable=False,
        ),
        sa.Column("amount_due_dispatch", sa.Numeric(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["dispatch_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(["rider_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["sender_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["vendor_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "item_images",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["item_id"], ["items.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "order_items",
        sa.Column("order_id", sa.Uuid(), nullable=False),
        sa.Column("item_id", sa.Uuid(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("sizes", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("colors", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("order_id", "item_id"),
    )
    op.create_table(
        "profile_images",
        sa.Column("profile_id", sa.Uuid(), nullable=False),
        sa.Column("profile_image_url", sa.String(), nullable=True),
        sa.Column("backdrop_image_url", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["profile.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("profile_id"),
        sa.UniqueConstraint("profile_id"),
    )
    op.create_table(
        "reviews",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("reviewer_id", sa.Uuid(), nullable=False),
        sa.Column("order_id", sa.Uuid(), nullable=True),
        sa.Column("item_id", sa.Uuid(), nullable=True),
        sa.Column("reviewee_id", sa.Uuid(), nullable=True),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.Column(
            "review_type",
            sa.Enum("ORDER", "PRODUCT", name="reviewtype"),
            nullable=False,
        ),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewee_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["reviewer_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("reviewer_id", "item_id", name="uq_user_item_review"),
        sa.UniqueConstraint("reviewer_id", "order_id", name="uq_user_order_review"),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("wallet_id", sa.Uuid(), nullable=False),
        sa.Column("to_wallet_id", sa.Uuid(), nullable=True),
        sa.Column("amount", sa.Numeric(), nullable=False),
        sa.Column("from_user", sa.String(), nullable=True),
        sa.Column("to_user", sa.String(), nullable=True),
        sa.Column(
            "transaction_type",
            sa.Enum(
                "FUND_WALLET",
                "PAY_WITH_WALLET",
                "USER_TO_USER",
                "WITHDRAWAL",
                "REFUND",
                name="transactiontype",
            ),
            nullable=False,
        ),
        sa.Column(
            "transaction_direction",
            sa.Enum("CREDIT", "DEBIT", name="transactiondirection"),
            nullable=True,
        ),
        sa.Column(
            "payment_status",
            sa.Enum(
                "FAILED",
                "PAID",
                "CANCELLED",
                "PENDING",
                "COMPLETED",
                "SUCCESSFUL",
                name="paymentstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "payment_method",
            sa.Enum("WALLET", "CARD", "BANK_TRANSFER", name="paymentmethod"),
            nullable=True,
        ),
        sa.Column("payment_link", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["to_wallet_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["wallet_id"],
            ["wallets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_reports",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("order_id", sa.Uuid(), nullable=True),
        sa.Column("complainant_id", sa.Uuid(), nullable=False),
        sa.Column("defendant_id", sa.Uuid(), nullable=False),
        sa.Column(
            "reported_user_type",
            sa.Enum("VENDOR", "DISPATCH", "CUSTOMER", name="reportedusertype"),
            nullable=False,
        ),
        sa.Column(
            "report_tag",
            sa.Enum("COMPLAINANT", "DEFENDANT", name="reporttag"),
            nullable=False,
        ),
        sa.Column(
            "report_type",
            sa.Enum(
                "DAMAGED_ITEMS",
                "WRONG_ITEMS",
                "LATE_DELIVERY",
                "RIDER_BEHAVIOUR",
                "CUSTOMER_BEHAVIOUR",
                "OTHERS",
                name="reporttype",
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "report_status",
            sa.Enum(
                "PENDING", "INVESTIGATING", "RESOLVED", "DISMISSED", name="reportstatus"
            ),
            nullable=False,
        ),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["complainant_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["defendant_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "complainant_id",
            "order_id",
            "defendant_id",
            name="uq_reporter_order_report",
        ),
    )
    op.create_table(
        "messages",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "message_type",
            sa.Enum("BROADCAST", "REPORT", name="messagetype"),
            nullable=False,
        ),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("sender_id", sa.Uuid(), nullable=True),
        sa.Column("report_id", sa.Uuid(), nullable=True),
        sa.Column(
            "role",
            sa.Enum(
                "CUSTOMER",
                "DISPATCH",
                "RESTAURANT_VENDOR",
                "LAUNDRY_VENDOR",
                "RIDER",
                "ADMIN",
                "SUPER_ADMIN",
                "MODERATOR",
                name="usertype",
            ),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["user_reports.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_report_read_status",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("report_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("read_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["user_reports.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "message_read_status",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("message_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("read", sa.Boolean(), nullable=False),
        sa.Column("read_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["messages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("message_read_status")
    op.drop_table("user_report_read_status")
    op.drop_table("messages")
    op.drop_table("user_reports")
    op.drop_table("transactions")
    op.drop_table("reviews")
    op.drop_table("profile_images")
    op.drop_table("order_items")
    op.drop_table("item_images")
    op.drop_table("deliveries")
    op.drop_table("wallets")
    op.drop_table("sessions")
    op.drop_index(op.f("ix_refresh_tokens_token"), table_name="refresh_tokens")
    op.drop_index(op.f("ix_refresh_tokens_id"), table_name="refresh_tokens")
    op.drop_table("refresh_tokens")
    op.drop_table("profile")
    op.drop_table("orders")
    op.drop_index(
        "uq_name_user_non_package",
        table_name="items",
        postgresql_where=sa.text("item_type != 'PACKAGE'"),
    )
    op.drop_table("items")
    op.drop_table("users")
    op.drop_table("charges")
    op.drop_table("categories")
    op.drop_table("audit_logs")
    # ### end Alembic commands ###
