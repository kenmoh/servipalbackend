"""add issues table

Revision ID: b55cdae78355
Revises: 8ea86a0d5d80
Create Date: 2025-06-17 17:31:13.635832

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b55cdae78355'
down_revision: Union[str, None] = '8ea86a0d5d80'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # op.execute("CREATE TYPE reviewertype AS ENUM ('ORDER', 'RIDER')")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('issues',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('order_id', sa.Uuid(), nullable=True),
    sa.Column('delivery_id', sa.Uuid(), nullable=True),
    sa.Column('dispatch_id', sa.Uuid(), nullable=True),
    sa.Column('vendor_id', sa.Uuid(), nullable=True),
    sa.Column('reporter_id', sa.Uuid(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('issue_type', postgresql.ENUM('DAMAGED_ITEMS', 'WRONG_ITEMS', 'LATE_DELIVERY', 'RIDER_BEHAVIOUR', 'OTHERS', name='issuetype',
            checkfirst=True), nullable=False),
    sa.Column('issue_status', postgresql.ENUM('PENDING', 'RESOLVED', name='issuestatus', checkfirst=True,), nullable=False),
    sa.Column('reporting', postgresql.ENUM('ORDER', 'DELIVERY', name='reportingtype',checkfirst=True,), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['delivery_id'], ['deliveries.id'], ),
    sa.ForeignKeyConstraint(['dispatch_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['vendor_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reporter_id', 'delivery_id', 'dispatch_id', name='uq_reporter_delivery_report'),
    sa.UniqueConstraint('reporter_id', 'order_id', 'vendor_id', name='uq_reporter_order_report')
    )
    op.drop_table('users_reviews')
    op.add_column('reviews', sa.Column('reviewer_id', sa.Uuid(), nullable=False))
    op.add_column('reviews', sa.Column('order_id', sa.Uuid(), nullable=True))
    op.add_column('reviews', sa.Column('delivery_id', sa.Uuid(), nullable=True))
    op.add_column('reviews', sa.Column('reviewee_id', sa.Uuid(), nullable=True))
    op.add_column('reviews', sa.Column('review_type', postgresql.ENUM('ORDER', 'PRODUCT', name='reviewertype',
            checkfirst=True), nullable=False))
    op.alter_column('reviews', 'item_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint('uq_user_item_review', 'reviews', type_='unique')
    op.create_unique_constraint('uq_user_item_review', 'reviews', ['reviewer_id', 'item_id'])
    op.create_unique_constraint('uq_user_delivery_review', 'reviews', ['reviewer_id', 'delivery_id'])
    op.create_unique_constraint('uq_user_order_review', 'reviews', ['reviewer_id', 'order_id'])
    op.drop_constraint('reviews_user_id_fkey', 'reviews', type_='foreignkey')
    op.create_foreign_key(None, 'reviews', 'deliveries', ['delivery_id'], ['id'])
    op.create_foreign_key(None, 'reviews', 'users', ['reviewee_id'], ['id'])
    op.create_foreign_key(None, 'reviews', 'users', ['reviewer_id'], ['id'])
    op.create_foreign_key(None, 'reviews', 'orders', ['order_id'], ['id'])
    op.drop_column('reviews', 'user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('reviews', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key('reviews_user_id_fkey', 'reviews', 'users', ['user_id'], ['id'])
    op.drop_constraint('uq_user_order_review', 'reviews', type_='unique')
    op.drop_constraint('uq_user_delivery_review', 'reviews', type_='unique')
    op.drop_constraint('uq_user_item_review', 'reviews', type_='unique')
    op.create_unique_constraint('uq_user_item_review', 'reviews', ['user_id', 'item_id'])
    op.alter_column('reviews', 'item_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('reviews', 'review_type')
    op.drop_column('reviews', 'reviewee_id')
    op.drop_column('reviews', 'delivery_id')
    op.drop_column('reviews', 'order_id')
    op.drop_column('reviews', 'reviewer_id')
    op.create_table('users_reviews',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reviewer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name='users_reviews_reviewer_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='users_reviews_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_reviews_pkey'),
    sa.UniqueConstraint('reviewer_id', 'user_id', name='uq_reviewer_user_review')
    )
    op.drop_table('issues')
    # ### end Alembic commands ###
