name: ServiPal CI/CD to Cloud Run

on:
  push:
    branches: ["main", "staging"]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.CLOUD_RUN_REGION }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  REDIS_URL: ${{ secrets.REDIS_URL }}

jobs:
  # ---------------- TEST JOB ----------------
  test:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

  # ---------------- BUILD JOB ----------------
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # only runs if tests pass

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet

      - name: Build and push Docker image
        id: build
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${{ github.ref_name }}:${SHORT_SHA}"
          docker build -t $IMAGE -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${{ github.ref_name }}:latest .
          docker push -a ${REGION}-docker.pkg.dev/${PROJECT_ID}/cloud-run-source-deploy/${{ github.ref_name }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  # ---------------- DEPLOY JOB ----------------
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Determine environment
        id: env
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "service=${{ secrets.SERVICE_NAME_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "service=${{ secrets.SERVICE_NAME_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          IMAGE=${{ needs.build.outputs.image }}
          SERVICE=${{ steps.env.outputs.service }}
          set +e
          gcloud run deploy $SERVICE \
            --image $IMAGE \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars DATABASE_URL=$DATABASE_URL,REDIS_URL=$REDIS_URL
          DEPLOY_EXIT=$?
          set -e
          if [ $DEPLOY_EXIT -ne 0 ]; then
            echo "Deployment failed, rolling back..."
            gcloud run services update-traffic $SERVICE --to-latest --region $REGION
            exit 1
          fi

      - name: Verify deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ steps.env.outputs.service }} --region $REGION --format='value(status.url)')
          echo "✅ Deployment successful: $SERVICE_URL"
